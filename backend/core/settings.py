"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.    }
}

# JWT configuration for admin authentication
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # Extended for admin use
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # Extended for admin use  
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}ct.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_URL = '/media/'  # URL Ä‘á»ƒ truy cáº­p file upload
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # ThÆ° má»¥c lÆ°u file upload


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# For production, use environment variable: os.environ.get('SECRET_KEY')
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-d96l0t=_j)_$k_be))$=#85lbg7izm7l442ft1%4mh+a-zss2v')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

# For production, set ALLOWED_HOSTS properly
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',') if os.environ.get('ALLOWED_HOSTS') else ['localhost', '127.0.0.1']

CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', 'http://localhost:3000').split(',') if os.environ.get('CORS_ALLOWED_ORIGINS') else ['http://localhost:3000']

# Enable credentials for CORS requests
CORS_ALLOW_CREDENTIALS = True

# Allow specific headers for CORS requests
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# ðŸ”¹ CSRF Protection - Use secure settings for production
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_SECURE = not DEBUG  # True for production (HTTPS), False for development
CSRF_COOKIE_HTTPONLY = False    # Keep False to allow JavaScript access
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'

# ðŸ”¹ Trusted origins for CSRF
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000', 
    'http://localhost:8000',
    'https://127.0.0.1:8000',
    'https://localhost:8000'
]

# ðŸ”¹ Session Configuration
SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_COOKIE_NAME = "sessionid"
SESSION_COOKIE_HTTPONLY = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_SAMESITE = "Lax"
SESSION_COOKIE_SECURE = not DEBUG  # True for production (HTTPS), False for development

# ðŸ”¹ HTTPS/Security Settings
SECURE_SSL_REDIRECT = False  # Disabled for development
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # 1 year for production
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'

# For production behind proxy (like nginx)
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

LOGIN_REDIRECT_URL = "/admin/"

# Override DEBUG setting for consistency (remove duplicate)
# DEBUG = True
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    "drf_yasg",
    'rest_framework_simplejwt.token_blacklist',  # Keep JWT for admin
    'user',  # Keep user app for admin management
    'video',
    # 'comment',  # Removed comment app
    'film',
    'django_extensions',
    # 'search',  # Temporarily disabled
    # 'elasticsearch_dsl',  # Temporarily disabled
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  
    'core.hls_middleware.HLSMiddleware',  # Add HLS streaming support
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',  # Disabled CSRF for API-only usage
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Keep for admin panel
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'
APPEND_SLASH = True
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME', 'viberfilm_db'),
        'USER': os.getenv('DB_USER', 'viberfilm_user'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'viberfilm_password'),
        'HOST': os.getenv('DB_HOST', 'db'),
        'PORT': os.getenv('DB_PORT', '3306'),
    }
}

# ELASTICSEARCH_DSL = {
#     'default': {
#         'hosts': [{'host': 'elasticsearch', 'port': 9200}],
#         'http_auth': ('elastic', '123456'),
#         'use_ssl': False,
#         'verify_certs': False,
#     }
# }

# Password validation - keeping for admin panel
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Removed custom user model - using default Django user for admin only
AUTH_USER_MODEL = 'user.User'  # Keep custom user model for admin

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email settings
# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = 'sieunhangao1024@gmail.com'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'sieunhangao1024@gmail.com'
EMAIL_HOST_PASSWORD = 'axraetiuyklhacva'
EMAIL_USE_LOCALTIME = True
EMAIL_USE_SSL = False

# Admin information for creating superuser
ADMIN_EMAIL = 'admin@gmail.com'
ADMIN_USERNAME = 'admin'
ADMIN_PASSWORD = 'admin'

# Redis Configuration
REDIS_HOST = '127.0.0.1'
REDIS_PORT = 6379
REDIS_DB = 1
REDIS_PASSWORD = None
REDIS_DECODE_RESPONSES = True

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379/1',  # Káº¿t ná»‘i tá»›i Redis server
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient', 
        }
    }
}


# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Default to AllowAny for public APIs
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ]
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'USER_AUTHENTICATION_RULE': 'my_project.my_app.auth.CustomAuthentication',
}


